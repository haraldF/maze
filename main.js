(()=>{"use strict";var t={178:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ActionSpace=e.AllActions=void 0,e.AllActions=[0,1,2,3],e.ActionSpace=((i={})[0]={x:-1,y:0},i[1]={x:1,y:0},i[2]={x:0,y:-1},i[3]={x:0,y:1},i)},506:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Agent=void 0;var i=function(){function t(t,e,i){void 0===e&&(e=.15),void 0===i&&(i=.2),this.alpha=e,this.G=new Map,this.stateHistory=new Array([0,0]),this.randomFactor=i,this.initReward(t)}return t.prototype.chooseAction=function(e,i){var o,n=this;if(Math.random()<this.randomFactor)o=i[Math.floor(t.getRandomNumber(0,i.length))];else{var r=i.map((function(t){return e.applied(t)})).map((function(t){return t.index})).map((function(t){return n.G.get(t)})).reduce((function(t,e,i,o){return e>o[t]?i:t}),0);o=i[r]}return o},t.prototype.updateStateHistory=function(t,e){this.stateHistory.push([t.index,e])},t.prototype.learn=function(){for(var t=0,e=this.stateHistory.length-1;e>=0;--e){var i=this.stateHistory[e],o=i[0],n=i[1],r=this.G.get(o);this.G.set(o,r+this.alpha*(t-r)),t+=n}this.stateHistory=[],this.randomFactor-=1e-4},t.prototype.initReward=function(e){for(var i=0,o=e;i<o.length;i++){var n=o[i];this.G.set(n,t.getRandomNumber(-1,-.1))}},t.getRandomNumber=function(t,e){return Math.random()*(e-t)+t},t}();e.Agent=i},517:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Maze=void 0;var o=i(178),n=function(){function t(t){this.tiles=t,this.steps=0,this.allowedMoves=new Map,this.height=t.length,this.width=t[0].length,t[0][0]=2,this.robotPosition=this.newState(0,0),this.initAllowedMoves()}return t.EmptyMaze=function(t,e){return Array.from(Array(e),(function(){return Array(t).fill(0)}))},t.prototype.newState=function(t,e){var i=this;return{x:t,y:e,index:t*this.width+e,applied:function(o){return i.applied(o,t,e)}}},t.prototype.applied=function(t,e,i){var n=o.ActionSpace[t];return this.newState(e+n.x,i+n.y)},t.prototype.getNewPosition=function(t){return this.robotPosition.applied(t)},t.prototype.isAllowedMove=function(t,e){var i=t.applied(e);return!(i.x<0||i.y<0||i.x>=this.height||i.y>=this.width)&&1!==this.tiles[i.x][i.y]},t.prototype.encodeTiles=function(){for(var t=String.fromCharCode(this.width,this.height),e=0,i=0,o=0;o<this.height;++o)for(var n=0;n<this.width;++n)1===this.tiles[o][n]&&(i|=1),8==++e?(t+=String.fromCharCode(i),e=0,i=0):i<<=1;return 0!==e&&(t+=String.fromCharCode(i<<7-e)),btoa(t)},t.loadTiles=function(e){for(var i=atob(e),o=0,n=i.charCodeAt(o++),r=i.charCodeAt(o++),s=t.EmptyMaze(n,r),a=i.charCodeAt(o++),h=0,l=0;l<r;++l)for(var u=0;u<n;++u)s[l][u]=128==(128&a)?1:0,8==++h?(a=i.charCodeAt(o++),h=0):a<<=1;return s},t.prototype.initAllowedMoves=function(){var t=this;this.allowedMoves.clear();for(var e=0;e<this.height;++e)for(var i=function(i){var r=n.newState(e,i),s=o.AllActions.filter((function(e){return t.isAllowedMove(r,e)}));n.allowedMoves.set(r.index,s)},n=this,r=0;r<this.width;++r)i(r)},t.prototype.toggleTile=function(t,e){0===t&&0===e||t===this.height-1&&e==this.width-1||(this.tiles[t][e]=1===this.tiles[t][e]?0:1,this.initAllowedMoves())},t.prototype.updateMaze=function(t){this.tiles[this.robotPosition.x][this.robotPosition.y]=0,this.robotPosition=this.getNewPosition(t),++this.steps,this.tiles[this.robotPosition.x][this.robotPosition.y]=2},t.prototype.isGameOver=function(){return this.robotPosition.x===this.height-1&&this.robotPosition.y===this.width-1},t.prototype.getState=function(){return this.robotPosition},t.prototype.getAllowedMoves=function(t){return this.allowedMoves.get(t.index)},t.prototype.getReward=function(){return this.isGameOver()?0:-1},t.prototype.reset=function(){this.steps=0,this.tiles[this.robotPosition.x][this.robotPosition.y]=0,this.tiles[0][0]=2,this.robotPosition=this.newState(0,0)},t.prototype.setRobotPosition=function(t,e){var i=this.newState(t,e);this.tiles[this.robotPosition.x][this.robotPosition.y]=0,this.robotPosition=i,this.tiles[this.robotPosition.x][this.robotPosition.y]=2},t.prototype.toIndex=function(t,e){return t*this.width+e},t.prototype.resize=function(t,e){this.reset();for(var i=this.height;i<e;++i)this.tiles.push(new Array(t).fill(0));this.tiles.length=e,this.height=e;for(var o=0,n=this.tiles;o<n.length;o++){var r=n[o];r.length=t,r.fill(0,this.width)}this.width=t,this.initAllowedMoves()},t}();e.Maze=n},550:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MazeView=void 0;var i=function(){function t(t,e){this.maze=t,this.canvas=e}return t.prototype.render=function(){this.renderMaze(),void 0!==this.G&&this.renderGValues(this.G)},t.prototype.renderMaze=function(){var t,e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),this.renderGrid(e);for(var i=this.canvas.width/this.maze.width,o=this.canvas.height/this.maze.height,n=0;n<this.maze.height;++n)for(var r=this.maze.tiles[n],s=0;s<this.maze.width;++s)1==r[s]?(e.fillStyle="#000000",e.fillRect(s*i,n*o,i,o)):2==r[s]?(e.fillStyle="#00AA00",e.fillRect(s*i,n*o,i,o)):s===this.maze.width-1&&n===this.maze.height-1?(e.fillStyle="#0000FF",e.fillRect(s*i,n*o,i,o)):(null===(t=this.visited)||void 0===t?void 0:t.has(this.maze.toIndex(n,s)))&&(e.fillStyle="#eeeeee",e.fillRect(s*i,n*o,i,o))},t.prototype.renderGrid=function(t){t.beginPath(),t.strokeStyle="grey";for(var e=0;e<this.maze.height+1;++e){var i=this.canvas.height/this.maze.height*e;t.moveTo(0,i),t.lineTo(this.canvas.width,i)}for(e=0;e<this.maze.width+1;++e){var o=this.canvas.width/this.maze.width*e;t.moveTo(o,0),t.lineTo(o,this.canvas.height)}t.stroke()},t.prototype.renderGValues=function(t){var e=this.canvas.getContext("2d"),i=this.canvas.width/this.maze.width,o=this.canvas.height/this.maze.height;e.font="30px serif",e.textAlign="center",e.fillStyle="#000000",e.textBaseline="middle";for(var n=0;n<this.maze.height;++n)for(var r=0;r<this.maze.width;++r){var s=this.maze.toIndex(r,n),a=t.get(s);e.fillText(a.toFixed(4),n*i+i/2,r*o+o/2,i)}},t.prototype.solve=function(t){for(var e=this,i=new Set([0]),o=this.maze.getState();o.x!==this.maze.height-1||o.y!==this.maze.width-1;){var n=this.maze.getAllowedMoves(o),r=n.map((function(t){return e.maze.applied(t,o.x,o.y)})).map((function(e){return i.has(e.index)?void 0:t.get(e.index)})).reduce((function(t,e,i,o){return void 0!==e&&(-1===t||o[t]<e)?i:t}),-1);if(-1===r)break;o=this.maze.applied(n[r],o.x,o.y),i.add(o.index)}return i},t.prototype.setG=function(t){this.G=t,this.visited=this.solve(t)},t}();e.MazeView=i},965:function(t,e,i){var o=this&&this.__awaiter||function(t,e,i,o){return new(i||(i=Promise))((function(n,r){function s(t){try{h(o.next(t))}catch(t){r(t)}}function a(t){try{h(o.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,a)}h((o=o.apply(t,e||[])).next())}))},n=this&&this.__generator||function(t,e){var i,o,n,r,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(n=2&r[0]?o.return:r[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,r[1])).done)return n;switch(o=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){s.label=r[1];break}if(6===r[0]&&s.label<n[1]){s.label=n[1],n=r;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(r);break}n[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var r,s=i(506),a=i(517),h=i(550),l=null===(r=new URLSearchParams(window.location.search).get("maze"))?function(){var t=a.Maze.EmptyMaze(6,6);return t[5][0]=1,t[5][1]=1,t[5][2]=1,t[5][3]=1,t[5][4]=1,t[0][5]=1,t[1][5]=1,t[2][5]=1,t[3][5]=1,t[2][2]=1,t[2][3]=1,t[2][4]=1,t[2][5]=1,t[3][2]=1,t}():a.Maze.loadTiles(r),u=new a.Maze(l),d=document.getElementById("maze"),c=new h.MazeView(u,d);function f(){var t=window.devicePixelRatio,e=d.getBoundingClientRect(),i=e.width,o=e.height;d.width=Math.ceil(i*t),d.height=Math.ceil(o*t),c.render()}function p(){window.history.replaceState(null,"Maze","?maze="+encodeURIComponent(u.encodeTiles()))}c.render(),f(),window.addEventListener("resize",f,!1),d.onclick=function(t){var e=d.getBoundingClientRect(),i=Math.floor(t.offsetY*u.height/e.width),o=Math.floor(t.offsetX*u.width/e.height);u.toggleTile(i,o),c.render(),p()},document.getElementById("startButton").onclick=function(){return o(this,void 0,void 0,(function(){var t,e,i,o,r,a,h,l,d,f,p;return n(this,(function(n){if((t=parseFloat(document.getElementById("alpha").value))<0||t>1)return console.error("Alpha must be between 0 and 1"),[2];if((e=parseFloat(document.getElementById("epsilon").value))<0||e>1)return console.error("Epsilon must be between 0 and 1"),[2];for(i=new Array,o=Array.from(Array(u.width*u.height),(function(t,e){return e})),r=new s.Agent(o,t,e),a=0;a<5e3;++a){for(;!u.isGameOver();)h=u.getState(),l=u.getAllowedMoves(h),d=r.chooseAction(h,l),u.updateMaze(d),f=u.getState(),p=u.getReward(),r.updateStateHistory(f,p),u.steps>1e3&&u.setRobotPosition(u.height-1,u.width-1);r.learn(),i.push(u.steps),u.reset()}return c.setG(r.G),c.render(),function(t){var e=[{x:t.map((function(t,e){return e})),y:t,mode:"lines"}];Plotly.newPlot("plot",e,{title:"Move History",xaxis:{title:"Episodes"},yaxis:{title:"StepCount"}})}(i),[2]}))}))};var v=document.getElementById("width"),y=document.getElementById("height");function w(t,e,i){return t<=e?e:t>=i?i:t}function g(){var t=w(Number.parseInt(v.value),1,127),e=w(Number.parseInt(y.value),1,127);u.resize(t,e),c.render(),p()}v.value=u.width.toString(),y.value=u.height.toString(),v.oninput=g,y.oninput=g}},e={};!function i(o){if(e[o])return e[o].exports;var n=e[o]={exports:{}};return t[o].call(n.exports,n,n.exports,i),n.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,